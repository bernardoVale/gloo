steps:

  # clones Gloo so it can be setup & tested
  # All steps after this must set working directory to use the cloned Gloo source

  # $COMMIT_SHA is a default gcloud env var, to run via cloudbuild submit use:
  # gcloud builds submit --substitutions COMMIT_SHA=<commit sha>,REPO_NAME=solo-io/gloo ./
  - name: 'gcr.io/$PROJECT_ID/prepare-go-workspace:0.3.0'
    args:
      - "--repo-name"
      - "$REPO_NAME"
      - "--repo-sha"
      - "$COMMIT_SHA"
      - "--repo-output-dir"
      - "."
    env:
      - 'GIT_SSH_CONFIG=FALSE'
    id: 'prepare-workspace'

  - name: 'gcr.io/cloud-builders/wget'
    entrypoint: ./ci/spell.sh
    args: ['check']
    dir: &dir '/workspace/gloo'
    env:
      # The LSCOMMAND is the env var which tells the spell script how to search for the files it needs to fix.
      - 'LSCOMMAND=find * -type f | grep -v vendor | grep -v docs/themes | grep -v docs/site'
    id: 'check-spelling'

  - name: gcr.io/cloud-builders/gsutil
    entrypoint: 'bash'
    args: ['-c', 'mkdir -p /go/pkg && cd /go/pkg && gsutil cat gs://$PROJECT_ID-cache/gloo/gloo-mod.tar.gz | tar -xzf -']
    dir: *dir
    id: 'untar-mod-cache'

  # Run all the tests with ginkgo -r -failFast -trace -progress --noColor
  # This requires setting up envoy, AWS, helm, and docker
  # The e2e-go-mod-ginkgo container provides everything else needed for running tests
  - name: 'gcr.io/$PROJECT_ID/go-mod-make:0.2.1'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        ENVOY_VERSION=v$$(make print-ENVOY_GLOO_IMAGE | cut -d: -f2)
        gsutil cp gs://solo-public-artifacts.solo.io/envoy/$$ENVOY_VERSION/envoy.stripped /workspace/envoy
        chmod +x /workspace/envoy
    dir: *dir
    waitFor: ['prepare-workspace']
    id: 'get-envoy'

  - name: gcr.io/cloud-builders/gcloud
    args:
      - kms
      - decrypt
      - --ciphertext-file=./ci/aws_credentials.enc
      - --plaintext-file=/workspace/aws_credentials
      - --location=global
      - --keyring=build
      - --key=build-key
    dir: *dir
    waitFor: ['prepare-workspace']
    id: 'setup-aws-creds'

  # Helm related setup
  - name: 'gcr.io/$PROJECT_ID/go-mod-make:0.2.1'
    args: ['fetch-helm']
    env:
      - 'TAGGED_VERSION=$TAG_NAME'
    dir: *dir
    waitFor: ['prepare-workspace']
    id: 'fetch-helm'

  # Docker related setup
  # grab this container immediately in parallel
  - name: 'gcr.io/$PROJECT_ID/e2e-go-mod-ginkgo:0.2.1'
    entrypoint: ls
    waitFor: ['-']
    id: 'grab-ginkgo-container'

  - name: gcr.io/cloud-builders/gcloud
    args: ['config', 'set', 'compute/zone', 'us-central1-a']
    id: 'set-gcr-zone'

  - name: gcr.io/cloud-builders/gcloud
    args: ['container', 'clusters', 'get-credentials', 'test-cluster-roles']
    waitFor: ['set-gcr-zone']
    id: 'get-test-credentials'

  - name: 'gcr.io/$PROJECT_ID/e2e-go-mod-ginkgo:0.2.1'
    env:
      - 'ENVOY_BINARY=/workspace/envoy'
      - 'AWS_SHARED_CREDENTIALS_FILE=/workspace/aws_credentials'
      - 'RUN_KUBE_TESTS=1'
      - 'RUN_CONSUL_TESTS=1'
      - 'RUN_VAULT_TESTS=1'
      - 'DOCKER_CONFIG=/workspace/.docker/'
    dir: *dir
    args: ['-r', '-failFast', '-untilItFails', '-trace', '-progress', '-race', '-compilers=4', '-failOnPending',  '-noColor', 'test/kube2e/gateway']
    waitFor: ['get-envoy', 'setup-aws-creds', 'fetch-helm', 'set-gcr-zone', 'get-test-credentials']
    secretEnv: ['AWS_ARN_ROLE_1']
    id: 'e2e-tests'

secrets:
  - kmsKeyName: projects/solo-public/locations/global/keyRings/build/cryptoKeys/build-key
    secretEnv:
      AWS_ARN_ROLE_1: CiQABlzmSTKWrIEGaH8UvsX3Wp8pz8ClQODVSjIZAiHuE9gNhM4SXACCPGSGCDSNJtdfkA0BLLmKTJLIM06XXEOV4iIooqlLfo9p7EOzOwqZaV9DFygO8/oKQqTFstc1vKgOz7YHrMaCx3GzqiHN2u//UmHRpvIwrDDfuIP5XNa0aOrj

timeout: 5400s
tags: ['gloo']
options:
  machineType: 'N1_HIGHCPU_32'
  volumes:
    - name: 'gopath'
      path: '/go'
